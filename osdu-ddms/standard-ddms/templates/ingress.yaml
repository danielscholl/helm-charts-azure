#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

{{- $name := include "standard-ddms.name" . }}
{{- $labels := include "standard-ddms.common-labels" . }}
{{- $namespace := .Release.Namespace }}
{{- $retryattempts := .Values.resiliency.retry_attempts | default 0 }}
{{- $dns := .Values.ingress.dns -}}
{{- if .Values.ingress.appGateway }}
{{- $enableKvCert := .Values.ingress.appGateway.enableKeyvaultCert -}}
{{- $certIssuer := .Values.ingress.appGateway.issuer -}}
---
# Deprecated.
# Use Azure AppGateway Ingress Controller and native K8S Ingres to route trafic.
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{ $name }}-ingress
  namespace: {{ $namespace }}
  labels: {{ $labels | nindent 4 }}
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/request-timeout: "300"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    {{- if $enableKvCert }}
    appgw.ingress.kubernetes.io/appgw-ssl-certificate: "appgw-ssl-cert"
    {{- else }}
    cert-manager.io/cluster-issuer: {{ $certIssuer }}
    cert-manager.io/acme-challenge-type: http01
    {{- end }}
spec:
  {{- if not $enableKvCert }}
  tls:
  - hosts:
    - {{ $dns }}
    secretName: osdu-certificate
  {{- end }}
  rules:
    - host: {{ $dns }}
      http:
        paths:
        {{- range .Values.configuration }}
        {{- if .path }}
        - path: {{ .path }}/*
          backend:
            serviceName: {{ .service }}-service
            servicePort: 80
        {{- end }}
        {{- end }}
{{- else }}

# Use Istio Gateway and Istio Virtual Service object to rout the trafic
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ $name }}-ingress
  namespace: {{ $namespace }}
  labels: {{ $labels | nindent 4 }}
spec:
  gateways:
  - istio-system/istio-gateway
  hosts:
  - {{ $dns }}
  http:
  {{- range .Values.configuration }}
  {{- if .path }}
  - match:
    - uri:
        prefix: {{ .path }}
    route:
    - destination:
        host: {{ .service }}-service.{{ $namespace }}.svc.cluster.local
        port:
          number: 80
    timeout: 300s
    {{- if $retryattempts }}
    retries:
      attempts: {{ $retryattempts }}
      perTryTimeout: 2s
      retryOn: refused-stream,gateway-error,connect-failure,reset,502,503
    {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
---