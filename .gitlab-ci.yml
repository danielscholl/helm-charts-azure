# AZURE_PRINCIPAL_ID        (Protected Branch)
# AZURE_PRINCIPAL_SECRET    (Protected Branch/Masked Variable)
# AZURE_TENANT_ID           (Protected Branch)
# AZURE_REGISTRY            (Protected Branch)

stages:
  - publish

# Helm build and push to glab ACR/helm
# helm_dir is required, it will take the specified Chart version
# If tag is detected will use tag instead as well as release detected
# if helm_version is set, it will overwritte the helm-version and ignore tag/release rules
.acr_helm_push: &acr_helm_push
  tags: ["osdu-small"]
  image: mcr.microsoft.com/azure-cli:2.38.0
  allow_failure: true
  stage: publish
  before_script:
    - |
      az login --service-principal -u $AZURE_PRINCIPAL_ID -p $AZURE_PRINCIPAL_SECRET --tenant $AZURE_TENANT_ID --query '[*].name'
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
      helm registry login ${AZURE_REGISTRY}.azurecr.io \
        --username "00000000-0000-0000-0000-000000000000" \
        --password "$(az acr login -n $AZURE_REGISTRY --expose-token --query 'accessToken' -otsv)"
      helm registry login msosdu.azurecr.io \
        --username "00000000-0000-0000-0000-000000000000" \
        --password "$(az acr login -n msosdu --expose-token --query 'accessToken' -otsv)"
      helm_chart_section=helm-charts-azure

      function _helm_package_and_push() {
        if [ -z $helm_dir ]; then echo "[ERROR] Instr: missing build dir \$1 arg"; exit 1; fi
        if [[ -z $helm_version ]]; then
          helm_version=$(helm show chart ${helm_dir} | awk '/^version/{print $2}')-${CI_COMMIT_SHORT_SHA}
        else
          export use_chart_version=true
        fi
        chart_name=$(helm show chart ${helm_dir} | awk '/^name/{print $2}')
        echo "[INFO] Helm package dir: $helm_dir | Name: ${chart_name}"
        echo "[INFO] version: $helm_version      | appVersion: $helm_app_version"
          
        helm package --dependency-update --version ${helm_version} --destination ${helm_dir} ${helm_dir} || helm package --version ${helm_version} --destination ${helm_dir} ${helm_dir}
        packaged_file=$(find $helm_dir -name "$chart_name*.tgz")
        echo "[INFO] Publishing helm package: ${packaged_file}"
        helm push $packaged_file oci://${AZURE_REGISTRY}.azurecr.io/helm/${helm_chart_section}
        helm show chart oci://${AZURE_REGISTRY}.azurecr.io/helm/${helm_chart_section}/${chart_name} --version ${helm_version} | head -20

        if [[ ! -z $CI_COMMIT_TAG ]] || [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]]; then
          echo "[INFO] Release branch or tag detected"
          if [[ $use_chart_version == "true" ]]; then
            helm push $packaged_file oci://msosdu.azurecr.io/helm
            helm show chart oci://msosdu.azurecr.io/helm/${chart_name} --version ${helm_version} | head -20
            return
          fi
          if [[ -z $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]]; 
            then
                RELEASE_VER=$(echo $CI_COMMIT_BRANCH | sed "s?^release/??");
                AZ_VER="$RELEASE_VER.0-r"
            elif [[ $CI_COMMIT_TAG =~ ^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$ ]]; 
            then
                AZ_VER=$(echo $CI_COMMIT_TAG | sed "s/^v//");
            else
              AZ_VER=0.0.0-latest;
              echo "[ERROR] Not able to parse release version";
            fi;
          find $helm_dir -name "$chart_name*.tgz" -exec rm -v {} \;
          helm_release_version=$(echo $AZ_VER | sed 's/^0./1./')
          helm package --dependency-update --version ${helm_release_version} --app-version ${AZ_VER} --destination ${helm_dir} ${helm_dir} || helm package --version ${helm_release_version} --app-version ${AZ_VER} --destination ${helm_dir} ${helm_dir}            
          release_packaged_file=$(find $helm_dir -name "$chart_name*.tgz")
          helm push $release_packaged_file oci://${AZURE_REGISTRY}.azurecr.io/helm/release-${AZ_VER}/${helm_chart_section}
          echo "[INFO] Publishing in msosdu"
          helm push $release_packaged_file oci://msosdu.azurecr.io/helm/
          helm show chart oci://msosdu.azurecr.io/helm/${chart_name} --version ${helm_release_version} | head -20
        fi
      }
      if [[ $helm_dir == "osdu-azure" ]]; then
        echo "[INFO] osdu-azure dir, building dependencies..."
        for ch in osdu-core_services osdu-security_compliance osdu-reference_helper osdu-partition_base osdu-ingest_enrich; do
          echo "[INFO] Building dep: $ch"
          helm dependency update osdu-azure/${ch}
        done
      fi
  script:
    - _helm_package_and_push

acr_publish:
  <<: *acr_helm_push
  rules:
    - if: '$AZURE == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$AZURE == "1" && $CI_COMMIT_TAG'
      when: on_success
  parallel:
    matrix:
      - helm_dir: osdu-airflow2
      - helm_dir: osdu-azure
      - helm_dir: osdu-ddms/standard-ddms
      - helm_dir: osdu-base
        helm_version: 1.0.0
      - helm_dir: osdu-istio
        helm_version: 1.1.6
