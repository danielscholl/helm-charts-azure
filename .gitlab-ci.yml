# AZURE_PRINCIPAL_ID        (Protected Branch)
# AZURE_PRINCIPAL_SECRET    (Protected Branch/Masked Variable)
# AZURE_TENANT_ID           (Protected Branch)
# AZURE_REGISTRY            (Protected Branch)

stages:
  - build
  - test
  - publish

.helm_validate: &helm_validate
  tags: ["osdu-small"]
  image: mcr.microsoft.com/azure-cli:2.38.0
  stage: build
  before_script:
    - |
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
  script:
    - |
      helm dependency update ${helm_dir} || echo "[WARN] Failed to update helm deps, skipping"
      helm lint ${helm_dir}

      if [[ -z $helm_values_file ]]; then
        echo "[INFO] helm template ${helm_dir}"
        helm template ${helm_dir} --debug
      else
        echo "[INFO] helm template ${helm_dir} -f ${helm_values_file}"
        helm template  ${helm_dir} -f ${helm_values_file} --debug
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
        - ${helm_dir}/*

# Needed vars
# helm_dir -> Chart on which are the helm templates and chart definition
# helm_cli_opts -> (Optional) If other options are needed for helm chart
.helm_test: &helm_test
  tags: ['osdu-medium']
  image: mcr.microsoft.com/azure-cli:2.38.0
  stage: test
  before_script:
    - |
      apk add docker-cli
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      curl -Lo /usr/bin/kind https://kind.sigs.k8s.io/dl/v0.15.0/kind-linux-amd64 && chmod +x /usr/bin/kind
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
      cat <<EOF >> cluster-config.yaml
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      nodes:
      - role: control-plane
        image: kindest/node:v1.24.4@sha256:adfaebada924a26c2c9308edd53c6e33b3d4e453782c0063dc0028bdebaddf98
      - role: worker
        image: kindest/node:v1.24.4@sha256:adfaebada924a26c2c9308edd53c6e33b3d4e453782c0063dc0028bdebaddf98
      - role: worker
        image: kindest/node:v1.24.4@sha256:adfaebada924a26c2c9308edd53c6e33b3d4e453782c0063dc0028bdebaddf98
      EOF
      kind create cluster --name $CI_JOB_ID --wait 180s --config cluster-config.yaml
      CONTAINER_ID=$(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build")
      docker network connect kind ${CONTAINER_ID}
      CONTROL_PLANE_IP=$(docker inspect  $(docker ps -q -f "label=io.x-k8s.kind.cluster=${CI_JOB_ID}" -f "label=io.x-k8s.kind.role=control-plane") | jq  -r .[0].NetworkSettings.Networks.kind.IPAddress)
      kind get kubeconfig --name $CI_JOB_ID --internal > $HOME/.kube/config
      kubectl cluster-info
      kubectl taint nodes --all node-role.kubernetes.io/master- || echo "[WARN] Not all nodes had this taint"
    # Installing dependencies
    - |
      echo "[INFO] Installing azure-osdu charts: cert-manager, csi-secret, pod-identity, keda"
      pushd /tmp
      helm install cert-manager --repo https://charts.jetstack.io --namespace cert-manager --version v1.8.2 --create-namespace --generate-name --set installCRDs=true
      helm install keda --repo https://kedacore.github.io/charts --version 2.7.2 --generate-name --create-namespace --namespace keda
      helm install csi-secrets-store-provider-azure --repo https://azure.github.io/secrets-store-csi-driver-provider-azure/charts --version 1.0.1 --generate-name -n kube-system
      helm install aad-pod-identity --repo https://raw.githubusercontent.com/Azure/aad-pod-identity/master/charts --version "4.1.5" -n kube-system --generate-name
      popd
      random_value=$(echo $RANDOM | md5sum | head -c 20; echo;)
      echo "[INFO] Installing osdu dependencies: osdu-base, istio-base, istio-operator"
      helm install osdu-base --generate-name --set ingress.admin=${random_value}@azure.com
      helm install osdu-istio/istio-base --namespace istio-system --create-namespace --generate-name
      helm install osdu-istio/istio-operator --namespace istio-system --create-namespace --generate-name
      kubectl create ns osdu-azure && kubectl label namespace osdu-azure istio-injection=enabled && kubectl create ns airflow
      chart_name=$(helm show chart ${helm_dir} | awk '/^name/{print $2}' | sed 's/\_/\-/g')
      echo "[INFO] Chart name: $chart_name | rvalue: $random_value"
      helm dependency update ${helm_dir} || echo "[WARN] Failed to update helm deps, skipping"
      echo "[INFO] Extra helm opts => ${helm_cli_opts}"
  script:    
    - >-
      helm upgrade -i ${chart_name} ./${helm_dir} --debug -n osdu-azure --create-namespace
      --set global.ingress.dns=${random_value}.ingress.local
      --set global.replicaCount=1
      --set ingress.dns=${random_value}.ingress.local
      --set deployment.replicaCount=1
      --set airflow.ingress.web.host=${random_value}.ingress.local
      ${helm_cli_opts}
    - kubectl get all -n osdu-azure
    - kubectl get events -n osdu-azure
  after_script:
    - kind delete cluster --name $CI_JOB_ID
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Helm build and push to glab ACR/helm
# helm_dir is required, it will take the specified Chart version
# If tag is detected will use tag instead as well as release detected
# if helm_version is set, it will overwritte the helm-version and ignore tag/release rules
.acr_helm_push: &acr_helm_push
  tags: ["osdu-small"]
  image: mcr.microsoft.com/azure-cli:2.38.0
  allow_failure: true
  stage: publish
  before_script:
    - |
      az login --service-principal -u $AZURE_PRINCIPAL_ID -p $AZURE_PRINCIPAL_SECRET --tenant $AZURE_TENANT_ID --query '[*].name'
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.9.1
      helm registry login ${AZURE_REGISTRY}.azurecr.io \
        --username "00000000-0000-0000-0000-000000000000" \
        --password "$(az acr login -n $AZURE_REGISTRY --expose-token --query 'accessToken' -otsv)"
      helm registry login msosdu.azurecr.io \
        --username "00000000-0000-0000-0000-000000000000" \
        --password "$(az acr login -n msosdu --expose-token --query 'accessToken' -otsv)"
      helm_chart_section=helm-charts-azure

      function _helm_package_and_push() {
        if [ -z $helm_dir ]; then echo "[ERROR] Instr: missing build dir \$1 arg"; exit 1; fi
        if [[ -z $helm_version ]]; then
          helm_version=$(helm show chart ${helm_dir} | awk '/^version/{print $2}')-${CI_COMMIT_SHORT_SHA}
        else
          export use_chart_version=true
        fi
        chart_name=$(helm show chart ${helm_dir} | awk '/^name/{print $2}')
        echo "[INFO] Helm package dir: $helm_dir | Name: ${chart_name}"
        echo "[INFO] version: $helm_version      | appVersion: $helm_app_version"
        _osdu-azure-package
          
        helm package --dependency-update --version ${helm_version} --destination ${helm_dir} ${helm_dir} || helm package --version ${helm_version} --destination ${helm_dir} ${helm_dir}
        packaged_file=$(find $helm_dir -name "$chart_name*.tgz")
        echo "[INFO] Publishing helm package: ${packaged_file}"
        helm push $packaged_file oci://${AZURE_REGISTRY}.azurecr.io/helm/${helm_chart_section}
        helm show chart oci://${AZURE_REGISTRY}.azurecr.io/helm/${helm_chart_section}/${chart_name} --version ${helm_version} | head -20

        if [[ ! -z $CI_COMMIT_TAG ]] || [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]]; then
          echo "[INFO] Release branch or tag detected"
          if [[ $use_chart_version == "true" ]]; then
            helm push $packaged_file oci://msosdu.azurecr.io/helm
            helm show chart oci://msosdu.azurecr.io/helm/${chart_name} --version ${helm_version} | head -20
            return
          fi
          if [[ -z $CI_COMMIT_TAG ]] && [[ $CI_COMMIT_BRANCH =~ ^release\/[0-9]{1,2}.[0-9]{1,2}$ ]]; 
            then
                RELEASE_VER=$(echo $CI_COMMIT_BRANCH | sed "s?^release/??");
                AZ_VER="$RELEASE_VER.0-r"
            elif [[ $CI_COMMIT_TAG =~ ^v[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$ ]]; 
            then
                AZ_VER=$(echo $CI_COMMIT_TAG | sed "s/^v//");
            else
              AZ_VER=0.0.0-latest;
              echo "[ERROR] Not able to parse release version";
            fi;
          find $helm_dir -name "$chart_name*.tgz" -exec rm -v {} \;
          helm_release_version=$(echo $AZ_VER | sed 's/^0./1./')
          if  [[ $helm_dir == "osdu-azure" ]]; then
            find $helm_dir \( -name "*.tgz" -o -name "Chart.lock" \) -exec rm -v {} \;
            echo "[INFO] Release detected, parsing osdu-azure charts"
            find  $helm_dir/ osdu-helm-library/ -name "Chart.ya*" \
              -exec sed -i -e "/appVersion/s/\"\?0.*$/${AZ_VER}/" -e "/version/s/\"\?[0-1].*$/${helm_release_version}/" {} \;
            _osdu-azure-package
          fi
          helm package --dependency-update --version ${helm_release_version} --app-version ${AZ_VER} --destination ${helm_dir} ${helm_dir} || helm package --version ${helm_release_version} --app-version ${AZ_VER} --destination ${helm_dir} ${helm_dir}
          release_packaged_file=$(find $helm_dir -name "$chart_name*.tgz")
          helm push $release_packaged_file oci://${AZURE_REGISTRY}.azurecr.io/helm/release-${AZ_VER}/${helm_chart_section}
          echo "[INFO] Publishing in msosdu"
          helm push $release_packaged_file oci://msosdu.azurecr.io/helm/
          helm show chart oci://msosdu.azurecr.io/helm/${chart_name} --version ${helm_release_version} | head -20
        fi
      }
      function _osdu-azure-package() {
        if [[ $helm_dir == "osdu-azure" ]]; then
          echo "[INFO] osdu-azure dir, building dependencies..."
          for ch in osdu-core_services osdu-security_compliance osdu-reference_helper osdu-partition_base osdu-ingest_enrich; do
            echo "[INFO] Building dep: $ch"
            helm dependency update osdu-azure/${ch}
          done
        fi
      }
  script:
    - _helm_package_and_push

acr_publish:
  <<: *acr_helm_push
  rules:
    - if: '$AZURE == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: on_success
    - if: '$AZURE == "1" && $CI_COMMIT_TAG'
      when: on_success
  parallel:
    matrix:
      - helm_dir: osdu-airflow2
      - helm_dir: osdu-azure
      - helm_dir: osdu-ddms/standard-ddms
      - helm_dir: osdu-base
        helm_version: 1.0.0
      - helm_dir: osdu-istio
        helm_version: 1.1.6

helm_validate:
  <<: *helm_validate
  parallel:
    matrix:
      - helm_dir: osdu-base
      - helm_dir: osdu-istio
      - helm_dir: osdu-airflow2
      - helm_dir: osdu-azure/osdu-partition_base
      - helm_dir: osdu-azure/osdu-security_compliance
      - helm_dir: osdu-azure/osdu-core_services
      - helm_dir: osdu-azure/osdu-reference_helper
      - helm_dir: osdu-azure/osdu-ingest_enrich
      - helm_dir: osdu-ddms/standard-ddms

# Istio base istio operators and osdu-base are being always installed as those are prerequirements
helm_test:
  <<: *helm_test
  parallel:
    matrix:
      - helm_dir: osdu-istio
      - helm_dir: osdu-airflow2
        helm_cli_opts: "--set airflow.airflow.extraVolumes= --set airflow.airflow.extraVolumeMounts= --no-hooks"
      - helm_dir: osdu-azure/osdu-partition_base
      - helm_dir: osdu-azure/osdu-security_compliance
      - helm_dir: osdu-azure/osdu-core_services
      - helm_dir: osdu-azure/osdu-reference_helper
      - helm_dir: osdu-azure/osdu-ingest_enrich
      - helm_dir: osdu-ddms/standard-ddms
        helm_cli_opts: "-f osdu-ddms/standard-ddms/reservoir.osdu.values.yaml"
      - helm_dir: osdu-ddms/standard-ddms
        helm_cli_opts: "-f osdu-ddms/standard-ddms/seismic.osdu.values.yaml"
      - helm_dir: osdu-ddms/standard-ddms
        helm_cli_opts: "-f osdu-ddms/standard-ddms/well-delivery.osdu.values.yaml"
      - helm_dir: osdu-ddms/standard-ddms
        helm_cli_opts: "-f osdu-ddms/standard-ddms/wellbore.osdu.values.yaml"
